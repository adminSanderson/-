import asyncio
import logging
import sqlite3
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from html import escape
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('events.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
cursor.execute("""
    CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_name TEXT,
        event_description TEXT,
        event_photo TEXT,
        event_author TEXT,
        event_date TEXT,
        city TEXT,
        entities TEXT
    )
""")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥–æ—Ä–æ–¥–æ–≤
cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_cities (
        user_id INTEGER PRIMARY KEY,
        city TEXT
    )
""")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
class SettingsStates(StatesGroup):
    city = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in config.ADMINS_ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–µ—Ä–æ–º
def is_poster(user_id):
    return user_id in config.POSTERS_ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_user_city(user_id, city):
    cursor.execute("INSERT OR REPLACE INTO user_cities (user_id, city) VALUES (?, ?)", (user_id, city))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_city(user_id):
    cursor.execute("SELECT city FROM user_cities WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    else:
        return None

from html import escape

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML
def save_event(event_name, event_description, event_photo, event_author, event_date, city, entities):
    cursor.execute("INSERT INTO events (event_name, event_description, event_photo, event_author, event_date, city, entities) VALUES (?, ?, ?, ?, ?, ?, ?)",
                   (escape(event_name), escape(event_description), event_photo, escape(event_author), event_date, city, str(entities)))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
def get_active_events_by_city(city):
    cursor.execute("SELECT * FROM events WHERE city = ? AND event_date >= ?", (city, datetime.datetime.now()))
    return cursor.fetchall()

import datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def delete_expired_events():
    cursor.execute("DELETE FROM events WHERE event_date < ?", (datetime.datetime.now(),))
    conn.commit()

# –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def check_expired_events():
    while True:
        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
        await delete_expired_events()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
    keyboard.add(types.KeyboardButton("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), types.KeyboardButton("üìä –ì—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã"))
    keyboard.add(types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def information(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=await information_menu())

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
async def information_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã"))
    keyboard.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.message_handler(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üë• –ö—É—Ä–∞—Ç–æ—Ä—ã"),
        types.KeyboardButton("üéì –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏"),
        types.KeyboardButton("üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏"),
    )
    keyboard.add(
        types.KeyboardButton("üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –ë–ü"),
        types.KeyboardButton("üí¨ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è"),
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@dp.message_handler(lambda message: message.text in ["üë• –ö—É—Ä–∞—Ç–æ—Ä—ã", "üéì –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏", "üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏", "üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –ë–ü", "üí¨ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è"])
async def contact_category(message: types.Message):
    category = message.text
    if category == "üë• –ö—É—Ä–∞—Ç–æ—Ä—ã":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:")
    elif category == "üéì –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤:")
    elif category == "üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:")
    elif category == "üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –ë–ü":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –ë–ü
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –ë–ü:")
    elif category == "üí¨ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è:")


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=await main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=await settings_menu())

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def settings_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"))
    keyboard.add(types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"), types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º...", reply_markup=await main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await SettingsStates.city.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
@dp.message_handler(lambda message: message.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def activities(message: types.Message):
    user_city = get_user_city(message.from_user.id)
    if user_city:
        events = get_active_events_by_city(user_city)
        if events:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            await send_event_info(message, events, 0)
        else:
            await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ :(")
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=await main_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
async def send_event_info(message: types.Message, events: list, index: int):
    event = events[index]
    event_name = event[1]
    event_description = event[2]
    event_date = event[5]
    event_author = event[4]  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    event_photo = event[3]   # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if index > 0:
        keyboard.insert(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_event_{index}"))
    if index < len(events) - 1:
        keyboard.insert(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_event_{index}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer_photo(
        photo=event_photo,
        caption=f"<b>{event_name}</b>\n\n"
                f"<i>–ê–≤—Ç–æ—Ä:</i> {event_author}\n"
                f"<i>–î–∞—Ç–∞:</i> {event_date}\n\n"
                f"{event_description}",
        reply_markup=keyboard,
        parse_mode=types.ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
@dp.callback_query_handler(lambda query: query.data.startswith(("prev_event_", "next_event_")))
async def switch_event(call: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ callback_data
    index = int(call.data.split("_")[-1])  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_city = get_user_city(call.from_user.id)
    events = get_active_events_by_city(user_city)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if call.data.startswith("prev_event_"):
        index -= 1
    elif call.data.startswith("next_event_"):
        index += 1
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if 0 <= index < len(events):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        await send_event_info(call.message, events, index)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await call.message.delete()
    else:
        await call.answer("–ù–µ—Ç –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=SettingsStates.city)
async def process_city_input(message: types.Message, state: FSMContext):
    new_city = message.text
    save_user_city(message.from_user.id, new_city)
    await state.finish()
    await message.answer("–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=await main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∞"
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞", state="*")
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def create_event(message: types.Message):
    if is_poster or is_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        await EventsStates.name.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EventsStates(StatesGroup):
    name = State()
    description = State()
    city = State()
    photo = State()
    date = State()
    author = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventsStates.name)
async def process_event_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await EventsStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventsStates.description)
async def process_event_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await EventsStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventsStates.city)
async def process_event_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await EventsStates.next()
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(content_types=types.ContentType.PHOTO, state=EventsStates.photo)
async def process_event_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    async with state.proxy() as data:
        data['photo'] = photo_id
    await EventsStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventsStates.date)
async def process_event_date(message: types.Message, state: FSMContext):
    date_str = message.text
    try:
        event_date = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:")
        return
    async with state.proxy() as data:
        data['date'] = event_date
    await EventsStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∞–≤—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventsStates.author)
async def process_event_author(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['author'] = message.text
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with state.proxy() as data:
        save_event(data['name'], data['description'], data['photo'], data['author'], data['date'], data['city'], "")
    await state.finish()
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=await main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@dp.message_handler(lambda message: message.text.startswith("–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"))
async def delete_event(message: types.Message):
    if is_poster or is_admin(message.from_user.id):
        event_name = message.text.removeprefix("–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ").strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        cursor.execute("SELECT id FROM events WHERE event_name = ?", (event_name,))
        result = cursor.fetchone()
        if result:
            # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM events WHERE event_name = ?", (event_name,))
            conn.commit()
            await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    asyncio.ensure_future(check_expired_events())
